service: aws-nestjs-dynamodb

plugins:
  - serverless-plugin-optimize
  - serverless-offline
  - serverless-api-gateway-caching
provider:
  name: aws
  tracing:
    apiGateway: true
    lambda: true
  runtime: nodejs16.x
  memorySize: 512
  architecture: x86_64
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    USERS_TABLE_NAME: ${self:custom.UsersTable.name}
    PATCHES_TABLE_NAME: ${self:custom.PatchesTable.name}
    JWT_SECRET: ${env:JWT_SECRET, 'dev-secret-change-me-in-production'}
  iam:
    role:
      statements:
        - ${file(iam/UsersTableIAM.yml):UsersTableIAM}
        - ${file(iam/PatchesTableIAM.yml):PatchesTableIAM}
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
    description: aws-nestjs-dynamodb

package:
  individually: true

resources:
  Resources:
    UsersTable: ${file(resources/UsersTable.yml):UsersTable}
    PatchesTable: ${file(resources/PatchesTable.yml):PatchesTable}  

functions:
  main: # The name of the lambda function
    handler: dist/lambda.handler # The module 'handler' is exported in the compiled file 'dist/lambda'
    events:
      - http:
          method: any
          path: /{any+}
          cors: true
          caching:
            enabled: true
custom:
  UsersTable:
    name: !Ref UsersTable
    arn: !GetAtt UsersTable.Arn
  PatchesTable:
    name: !Ref PatchesTable
    arn: !GetAtt PatchesTable.Arn
