name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  # Security and testing phase
  security-and-tests:
    name: Security Audit & Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Install backend dependencies
        run: |
          cd server-src
          npm ci

      - name: Security audit
        run: |
          cd server-src
          chmod +x scripts/security-audit.sh
          ./scripts/security-audit.sh
        continue-on-error: false

      - name: Run frontend tests
        run: npm run test:ci

      - name: Run backend tests
        run: |
          cd server-src
          npm test

      - name: Test frontend build
        run: npm run build:prod

      - name: Test backend build
        run: |
          cd server-src
          npm run build

  # Deploy backend to AWS Lambda
  deploy-backend:
    name: Deploy Backend API
    runs-on: ubuntu-latest
    needs: [security-and-tests]
    if: ${{ always() && (needs.security-and-tests.result == 'success' || github.event.inputs.skip_tests == 'true') }}
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 18 (for Serverless compatibility)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Serverless Framework
        run: npm install -g serverless@3.38.0

      - name: Install backend dependencies
        run: |
          cd server-src
          npm ci

      - name: Build backend
        run: |
          cd server-src
          npm run build

      - name: Deploy backend to AWS Lambda
        run: |
          cd server-src
          serverless deploy --stage prod --region ${{ env.AWS_REGION }}

      - name: Invalidate backend CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id E3SEX5DHGHP60B \
            --paths "/*"

  # Deploy frontend to S3
  deploy-frontend:
    name: Deploy Frontend UI
    runs-on: ubuntu-latest
    needs: [security-and-tests]
    if: ${{ always() && (needs.security-and-tests.result == 'success' || github.event.inputs.skip_tests == 'true') }}
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: npm ci

      - name: Build Angular app for production
        run: npm run build:prod

      - name: Deploy to S3
        run: |
          aws s3 sync dist/brutal-patches/ s3://brutal-patches-ui --delete

      - name: Configure S3 for Angular routing
        run: |
          aws s3 website s3://brutal-patches-ui \
            --index-document index.html \
            --error-document index.html
          echo "‚úÖ S3 configured for Angular SPA routing"

      - name: Invalidate frontend CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id E3ABLSDKEX6QYF \
            --paths "/*"

  # Post-deployment validation
  validate-deployment:
    name: Validate Production Deployment
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: ${{ needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success' }}
    steps:
      - name: Wait for deployment to stabilize
        run: sleep 30

      - name: Test backend health
        run: |
          echo "Testing backend API at api.brutalpatches.com..."
          curl -f "https://api.brutalpatches.com/health" || (echo "Backend health check failed" && exit 1)
          echo "‚úÖ Backend is healthy"

      - name: Test API endpoints
        run: |
          echo "Testing API endpoints..."
          curl -f "https://api.brutalpatches.com/api/patches/total" || (echo "Patches total endpoint failed" && exit 1)
          curl -f "https://api.brutalpatches.com/api/patches" || (echo "Patches list endpoint failed" && exit 1)
          echo "‚úÖ API endpoints are working"

      - name: Test frontend
        run: |
          echo "Testing frontend at brutalpatches.com..."
          curl -f "https://brutalpatches.com" || (echo "Frontend health check failed" && exit 1)
          echo "‚úÖ Frontend is accessible"

      - name: Test SPA routing
        run: |
          echo "Testing SPA routing..."
          # Test that deep links return the Angular app (not 404)
          curl -s "https://brutalpatches.com/my-patches" | grep -q "<app-root>" || (echo "‚ùå SPA routing failed for /my-patches" && exit 1)
          curl -s "https://brutalpatches.com/login" | grep -q "<app-root>" || (echo "‚ùå SPA routing failed for /login" && exit 1)
          curl -s "https://brutalpatches.com/patches" | grep -q "<app-root>" || (echo "‚ùå SPA routing failed for /patches" && exit 1)
          echo "‚úÖ SPA routing is working correctly"

  # Deployment notification
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, validate-deployment]
    if: always()
    steps:
      - name: Deployment Success
        if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success' && needs.validate-deployment.result == 'success'
        run: |
          echo "üéâ Production deployment successful!"
          echo "Frontend: https://brutalpatches.com"
          echo "Backend API: https://api.brutalpatches.com"
          echo "All health checks passed ‚úÖ"

      - name: Deployment Failure
        if: needs.deploy-backend.result != 'success' || needs.deploy-frontend.result != 'success' || needs.validate-deployment.result != 'success'
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Backend status: ${{ needs.deploy-backend.result }}"
          echo "Frontend status: ${{ needs.deploy-frontend.result }}"
          echo "Validation status: ${{ needs.validate-deployment.result }}"
          exit 1