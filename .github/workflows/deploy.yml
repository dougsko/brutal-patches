name: Deploy to AWS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Install backend dependencies
        run: |
          cd server-src
          npm install

      - name: Run frontend tests
        run: npm run test:ci

      - name: Run backend tests
        run: |
          cd server-src
          npm test

  deploy-backend:
    name: Deploy Backend (Lambda)
    runs-on: ubuntu-latest
    needs: test
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Serverless Framework v3.38.0 (stable)
        run: npm install -g serverless@3.38.0

      - name: Install backend dependencies
        run: |
          cd server-src
          npm install

      - name: Build backend with NestJS
        run: |
          cd server-src
          npm run build

      - name: Verify serverless configuration
        run: |
          cd server-src
          echo "Serverless configuration:"
          cat serverless.yml | grep runtime
          echo "Checking if dist directory exists:"
          ls -la dist/

      - name: Clean up failed CloudFormation stack (if exists)
        run: |
          cd server-src
          echo "Checking for failed CloudFormation stack..."
          if aws cloudformation describe-stacks --stack-name aws-nestjs-dynamodb-prod --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "Stack exists, checking status..."
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name aws-nestjs-dynamodb-prod --region ${{ env.AWS_REGION }} --query 'Stacks[0].StackStatus' --output text)
            echo "Stack status: $STACK_STATUS"
            if [[ "$STACK_STATUS" == *"FAILED"* ]] || [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]]; then
              echo "Removing failed stack..."
              aws cloudformation delete-stack --stack-name aws-nestjs-dynamodb-prod --region ${{ env.AWS_REGION }}
              echo "Waiting for stack deletion..."
              aws cloudformation wait stack-delete-complete --stack-name aws-nestjs-dynamodb-prod --region ${{ env.AWS_REGION }}
              echo "Failed stack removed successfully"
            fi
          else
            echo "No existing stack found"
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        continue-on-error: true

      - name: Deploy backend to AWS Lambda
        run: |
          cd server-src
          serverless deploy --stage prod --region ${{ env.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

  deploy-frontend:
    name: Deploy Frontend (S3)
    runs-on: ubuntu-latest
    needs: test
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: npm ci

      - name: Build Angular app for production
        run: npm run build:prod

      - name: Deploy to S3
        run: |
          aws s3 sync dist/brutal-patches/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure S3 for Angular routing
        run: |
          aws s3 website s3://${{ secrets.S3_BUCKET_NAME }} --index-document index.html --error-document index.html
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Invalidate CloudFront (if configured)
        run: |
          if [ ! -z "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          else
            echo "CloudFront distribution ID not configured, skipping invalidation"
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    steps:
      - name: Deployment Success
        if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "Frontend: Deployed to S3"
          echo "Backend: Deployed to AWS Lambda"
          echo "Application should be live at: ${{ secrets.APP_URL || 'https://brutalpatches.com' }}"

      - name: Deployment Failure
        if: needs.deploy-backend.result != 'success' || needs.deploy-frontend.result != 'success'
        run: |
          echo "❌ Deployment failed!"
          echo "Backend status: ${{ needs.deploy-backend.result }}"
          echo "Frontend status: ${{ needs.deploy-frontend.result }}"
          exit 1